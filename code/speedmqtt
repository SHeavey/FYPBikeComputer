    #!/usr/bin/python3
import RPi.GPIO as GPIO
from time import sleep
import time, math
import paho.mqtt.client as paho
from time import sleep


# Define event callbacks
def on_connect(mosq, obj, rc):
    print("rc: " + str(rc))

def on_message(mosq, obj, msg):
    #print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))
    data1 = msg.payload    
    data=data1.decode("utf-8")
    print(data)


def on_publish(mosq, obj, mid):
    print("mid: " + str(mid))

def on_subscribe(mosq, obj, mid, granted_qos):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

def on_log(mosq, obj, level, string):
    print(string)

mqttc = paho.Client()
# Assign event callbacks
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe


url="https://farmer.cloudmqtt.com"

# Connect
mqttc.username_pw_set("gevhoohx", "C3pzwLvEM5ns")
mqttc.connect("farmer.cloudmqtt.com", 11836)


dist_meas = 0.00
km_per_hour = 0
rpm = 0
elapse = 0
sensor = 2
pulse = 0
avgSpeed=0
MaxSpeed=0
lastSpeed=0
lastpulse=0
count=0
start_timer = time.time()

def init_GPIO():					# initialize GPIO
	GPIO.setmode(GPIO.BCM)
	GPIO.setwarnings(False)
	GPIO.setup(sensor,GPIO.IN,GPIO.PUD_UP)#pull up because resistor is not used, internal pull up resistor. sensor not triggered = 1. sensor triggered = 0

def calculate_elapse(channel):				# callback function
	global pulse, start_timer, elapse
	pulse+=1								# increase pulse by 1 whenever interrupt occurred
	elapse = time.time() - start_timer		# elapse for every 1 complete rotation made!
	start_timer = time.time()				# let current time equals to start_timer


def calculate_speed(r_cm):
	global pulse,elapse,rpm,dist_km,dist_meas,km_per_sec,km_per_hour,avgSpeed,lastSpeed,MaxSpeed,lastpulse,count
	if elapse !=0:							# to avoid DivisionByZero error
            rpm = 1/elapse * 60
            circ_cm = (2*math.pi)*r_cm          # calculate wheel circumference in CM
            dist_km = circ_cm/100000            # convert cm to km
            km_per_sec = dist_km / elapse       # calculate KM/sec
            km_per_hour = km_per_sec * 3600     # calculate KM/h
            dist_meas = (dist_km*pulse)*1000    # measure distance traverse in meter

            if(lastpulse==pulse):
                count=count+1
                if(count>100):#if last pulse = pulse for 10 seconds, bike has stopped, return to 0
                    mqttc.publish("Speed",0)
                    mqttc.publish("RPM",0)
                    km_per_sec=0
                    rpm=0
                    count=0
            else:
                count=0
                mqttc.publish("Speed",int(km_per_hour))
                mqttc.publish("RPM",int(rpm))
                mqttc.publish("Distance","%.2f"%float(int(dist_meas)/1000)) #publish distance in km , but by dividing by 1000, it can give large value after 0 so i restrict it to 2 decimal
                avgSpeed=(avgSpeed+km_per_hour)/2
                mqttc.publish("ASpeed","%.2f"%avgSpeed)
                if(km_per_hour>MaxSpeed):
                    MaxSpeed=km_per_hour
                    
                mqttc.publish("MSpeed",int(MaxSpeed))
                    
            lastpulse=pulse
            
            return km_per_hour
        
	

def init_interrupt():
	GPIO.add_event_detect(sensor, GPIO.FALLING, callback = calculate_elapse, bouncetime = 20)#interrupt last for 20ms
	

	

if __name__ == '__main__':
	init_GPIO()
	init_interrupt()
	
	while True:
		calculate_speed(33.3589)	# call this function with wheel radius as parameter
		print('rpm:{0:.0f}-RPM kmh:{1:.0f}-KMH dist_meas:{2:.2f}m pulse:{3}'.format(rpm,km_per_hour,dist_meas,pulse))
		sleep(0.1)
